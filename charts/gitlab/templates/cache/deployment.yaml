{{ include "deployment-spec" (dict 
  "Values" .Values
  "Release" .Release
  "Chart" .Chart
  "component" "cache") }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  {{- include "selector-spec" (dict "Chart" .Chart "component" "cache") | nindent 2 }}
  template:
    {{- include "metadata-spec" (dict 
      "Values" .Values
      "Release" .Release
      "Chart" .Chart
      "component" "cache"
      "annotations" .Values.cache.pod.annotations) | nindent 4}}
    spec:
      serviceAccountName: "{{ .Chart.Name }}-cache"
      securityContext:
        runAsUser: {{ .Values.cache.uid }}
        runAsGroup: {{ .Values.cache.gid }}
        fsGroup: {{ .Values.cache.gid }}
      {{- with .Values.cache.pullSecret }}
      imagePullSecrets:
        - name: "{{ . }}"
      {{- end }}
      containers:
        - name: "{{ .Chart.Name }}-cache"
          image: "{{ .Values.cache.image.name }}:{{ .Values.cache.image.tag }}"
          imagePullPolicy: "{{ .Values.cache.image.pullPolicy }}"
          command:
            - 'sh'
          args:
            - '-c'
            - |
              id;
              stat "/export";
              mkdir -p "/export/${MINIO_BUCKET_NAME}";
              minio server "/export";
          env:
            - name: "MINIO_ROOT_USER"
              valueFrom:
                secretKeyRef:
                  name: "{{ .Chart.Name }}-cache"
                  key: "accessKey"
                  optional: false
            - name: "MINIO_ROOT_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ .Chart.Name }}-cache"
                  key: "secretKey"
                  optional: false
            - name: "MINIO_BROWSER"
              value: "off"
            - name: "MINIO_BUCKET_NAME"
              value: "{{ .Values.cache.bucket.name }}"
            - name: "MINIO_USERNAME"
              value: "cache"
            - name: "MINIO_GROUPNAME"
              value: "cache"
          {{- with .Values.cache.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: s3
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: s3
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /minio/health/live
              port: s3
            failureThreshold: 1
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{- toYaml .Values.cache.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: "data-volume"
              mountPath: "/export"
      nodeSelector:
        {{- toYaml .Values.cache.nodeSelector | nindent 8 }}
      volumes:
        - name: "data-volume"
          persistentVolumeClaim:
            claimName: "{{ .Chart.Name }}-cache-data"
