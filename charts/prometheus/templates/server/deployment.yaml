{{ $configMapHash := include (print $.Template.BasePath "/server/configmap.yaml") . | sha256sum }}
apiVersion: apps/v1
kind: Deployment
{{ include "metadata-spec" (dict 
  "Values" .Values
  "Release" .Release
  "Chart" .Chart
  "component" "server") }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  {{- include "selector-spec" (dict "Chart" .Chart "component" "server") | nindent 2 }}
  template:
    {{- include "metadata-spec" (dict 
      "Values" .Values
      "Release" .Release
      "Chart" .Chart
      "component" "server"
      "annotations" .Values.prometheus.server.pod.annotations
      "checksum" $configMapHash) | nindent 4}}
    spec:
      serviceAccountName: "{{ .Chart.Name }}-server"
      securityContext:
        runAsUser: {{ .Values.prometheus.server.uid }}
        runAsGroup: {{ .Values.prometheus.server.gid }}
        fsGroup: {{ .Values.prometheus.server.gid }}
      {{- with .Values.prometheus.server.pullSecret }}
      imagePullSecrets:
        - name: "{{ . }}"
      {{- end }}
      {{- if .Values.prometheus.server.auth.enabled }}
      initContainers:
        {{- include "init-openldap-wait" (dict "Values" .Values "Release" .Release "Chart" .Chart) | nindent 8 }}
        {{- include "init-openldap-create" (dict "Values" .Values "Release" .Release "Chart" .Chart "group" .Values.prometheus.server.auth.group) | nindent 8 }}
      {{- end }}
      containers:
        - name: "{{ .Chart.Name }}-server"
          image: "{{ .Values.prometheus.server.image.name }}:{{ .Values.prometheus.server.image.tag }}"
          imagePullPolicy: "{{ .Values.prometheus.server.image.pullPolicy }}"
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
          {{- with .Values.prometheus.server.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: web
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: web
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: web
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{- toYaml .Values.prometheus.server.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: "config-volume"
              mountPath: "/etc/prometheus/prometheus.yml"
              subPath: "prometheus.yml"
              readOnly: true
            - name: "data-volume"
              mountPath: "/prometheus"
      nodeSelector:
        {{- toYaml .Values.prometheus.server.nodeSelector | nindent 8 }}
      volumes:
        - name: "config-volume"
          configMap:
            name: "{{ .Chart.Name }}-server"
            optional: false
            items:
              - key: "prometheus.yml"
                path: "prometheus.yml"
        - name: "data-volume"
          persistentVolumeClaim:
            claimName: "{{ .Chart.Name }}-server-data"
