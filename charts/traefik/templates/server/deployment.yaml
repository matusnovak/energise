{{ include "deployment-spec" (dict 
  "Values" .Values
  "Release" .Release
  "Chart" .Chart
  "component" "server") }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  {{- include "selector-spec" (dict "Chart" .Chart "component" "server") | nindent 2 }}
  template:
    {{- include "metadata-spec" (dict 
      "Values" .Values
      "Release" .Release
      "Chart" .Chart
      "component" "server"
      "annotations" .Values.server.pod.annotations) | nindent 4}}
    spec:
      serviceAccountName: "{{ .Chart.Name }}-server"
      securityContext:
        runAsUser: {{ .Values.server.uid }}
        runAsGroup: {{ .Values.server.gid }}
        fsGroup: {{ .Values.server.gid }}
      {{- with .Values.server.pullSecret }}
      imagePullSecrets:
        - name: "{{ . }}"
      {{- end }}
      {{- if .Values.server.auth.enabled }}
      initContainers:
        {{- include "init-openldap-wait" (dict "Values" .Values "Release" .Release "Chart" .Chart) | nindent 8 }}
        {{- include "init-openldap-create" (dict "Values" .Values "Release" .Release "Chart" .Chart "group" .Values.server.auth.group) | nindent 8 }}
      {{- end }}
      containers:
        - name: "{{ .Chart.Name }}-server"
          image: "{{ .Values.server.image.name }}:{{ .Values.server.image.tag }}"
          imagePullPolicy: "{{ .Values.server.image.pullPolicy }}"
          {{- with .Values.server.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: traefik
              containerPort: {{ .Values.server.port }}
              protocol: TCP
            {{- if .Values.server.http.enabled }}
            - name: web
              containerPort: {{ .Values.server.http.port }}
              protocol: TCP
            {{- end }}
            {{- if .Values.server.https.enabled }}
            - name: websecure
              containerPort: {{ .Values.server.https.port }}
              protocol: TCP
            {{- end }}
          readinessProbe:
            httpGet:
              path: /ping
              port: traefik
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /ping
              port: traefik
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{- toYaml .Values.server.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: config-volume
              mountPath: "/etc/traefik"
              readOnly: true
            {{- if eq .Values.server.certs.type "resolver"  }}
            - name: acme-volume
              mountPath: /acme
            {{- end }}
            {{- if and (.Values.server.certs.certFile) (.Values.server.certs.keyFile) }}
            - name: certs-volume
              mountPath: "/certs"
              readOnly: true
            {{- end }}
      nodeSelector:
        {{- toYaml .Values.server.nodeSelector | nindent 8 }}
      volumes:
        - name: config-volume
          configMap:
            name: "{{ .Chart.Name }}-server"
            optional: false
            items:
              - key: "traefik.yml"
                path: "traefik.yml"
        - name: acme-volume
          persistentVolumeClaim:
            claimName: "{{ .Chart.Name }}-server-data"
        {{- if and (.Values.server.certs.certFile) (.Values.server.certs.keyFile) }}
        - name: certs-volume
          secret:
            secretName: "{{ .Chart.Name }}-server"
            optional: false
            items:
              - key: "cert.pem"
                path: "{{ .Values.global.domain }}.cert"
              - key: "key.pem"
                path: "{{ .Values.global.domain }}.key"
        {{- end }}
