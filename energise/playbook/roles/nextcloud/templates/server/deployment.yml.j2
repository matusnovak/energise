apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ nextcloud.server.name }}"
  namespace: "{{ common.namespace }}"
  labels:
    {{ service.extraLabels | to_nice_yaml | indent(4) }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{ service.selector | to_nice_yaml | indent(6) }}
  template:
    metadata:
      annotations:
        checksum/config: "{{ group_ldif | hash('md5') }}"
{% if nextcloud.server.podAnnotations %}
        {{ nextcloud.server.podAnnotations | to_nice_yaml | indent(8) }}
{% endif %}
      labels:
        {{ service.selector | to_nice_yaml | indent(8) }}
{% if nextcloud.server.podLabels %}
        {{ nextcloud.server.podLabels | to_nice_yaml | indent(8) }}
{% endif %}
    spec:
      serviceAccountName: "{{ nextcloud.server.name }}"
      enableServiceLinks: false
      initContainers:
        - name: "init-postgres"
          image: "{{ postgres.server.image.name }}:{{ postgres.server.image.tag }}"
          imagePullPolicy: "{{ postgres.server.image.pullPolicy }}"
          command:
            - 'sh'
            - '-c'
            - |
              until psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_ROLE -d $POSTGRES_DB -c "select 1"; do echo "waiting for database"; sleep 2; done;
              echo "SELECT 'CREATE DATABASE {{ nextcloud.server.database.name }}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{ nextcloud.server.database.name }}')\gexec" | psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_ROLE -d $POSTGRES_DB;
              echo "SELECT 'CREATE ROLE {{ nextcloud.server.database.role }} WITH LOGIN PASSWORD ''{{ nextcloud.server.database.password }}''' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '{{ nextcloud.server.database.role }}')\gexec" | psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_ROLE -d $POSTGRES_DB;
              echo "GRANT ALL PRIVILEGES ON DATABASE {{ nextcloud.server.database.name }} TO {{ nextcloud.server.database.role }}" | psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_ROLE -d $POSTGRES_DB;
          env:
            - name: POSTGRES_HOST
              value: "{{ postgres_server_url }}"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_ROLE
              value: "{{ postgres.server.user }}"
            - name: POSTGRES_DB
              value: "{{ postgres.server.database }}"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ postgres.server.name }}"
                  key: password
                  optional: false
        - name: "init-openldap"
          image: "{{ openldap.server.image.name }}:{{ openldap.server.image.tag }}"
          imagePullPolicy: "{{ openldap.server.image.pullPolicy }}"
          command:
            - '/bin/bash'
            - '-c'
            - |
              until ldapsearch -x -H "ldap://$LDAP_HOST:389" -D "$LDAP_USER" -w "$LDAP_PASSWORD" -b "$LDAP_BASE" -o nettimeout=1; do echo "waiting for openldap"; sleep 2; done;
              count=$(ldapsearch -x -H "ldap://$LDAP_HOST:389" -D "$LDAP_USER" -w "$LDAP_PASSWORD" -b "$LDAP_BASE" "(&(objectClass=groupOfUniqueNames)(cn=nextcloud))" | grep dn: | wc -l)
              if [ "$count" == "0" ]; then ldapmodify -x -H "ldap://$LDAP_HOST:389" -D "$LDAP_USER" -w "$LDAP_PASSWORD" -f /scripts/group.ldif; fi;
          env:
            - name: LDAP_HOST
              value: "{{ openldap_server_url }}"
            - name: LDAP_USER
              value: "cn=admin,{{ common.domainComponent }}"
            - name: LDAP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ openldap.server.name }}"
                  key: password
                  optional: false
            - name: LDAP_BASE
              value: "ou=groups,{{ common.domainComponent }}"
          volumeMounts:
            - name: scripts-volume
              mountPath: "/scripts"
              readonly: true
      containers:
        - name: "server"
          image: "{{ nextcloud.server.image.name }}:{{ nextcloud.server.image.tag }}"
          imagePullPolicy: "{{ nextcloud.server.image.pullPolicy }}"
          env:
            - name: POSTGRES_HOST
              value: "{{ postgres_server_url }}"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_ROLE
              value: "{{ nextcloud.server.database.role }}"
            - name: POSTGRES_DB
              value: "{{ nextcloud.server.database.name }}"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ postgres.server.name }}"
                  key: password
                  optional: false
            - name: NEXTCLOUD_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ nextcloud.server.name }}"
                  key: user
                  optional: false
            - name: NEXTCLOUD_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ nextcloud.server.name }}"
                  key: password
                  optional: false
            - name: NEXTCLOUD_DATA_DIR
              value: "/var/www/html/data"
            - name: REDIS_HOST
              value: "{{ nextcloud_redis_url }}"
            - name: REDIS_HOST_PORT
              value: "6379"
            - name: REDIS_HOST_PASSWORD
              value: "{{ nextcloud.redis.password }}"
            - name: NEXTCLOUD_HOSTNAME
              value: "{{ nextcloud.server.subdomain }}.{{ common.domain }}"
            - name: NEXTCLOUD_TRUSTED_DOMAINS
              value: "{{ nextcloud.server.subdomain }}.{{ common.domain }} {{ nextcloud_server_url }} localhost"
            - name: OVERWRITEPROTOCOL
              value: "https"
            - name: OVERWRITEHOST
              value: "{{ nextcloud.server.subdomain }}.{{ common.domain }}"
{#            - name: OBJECTSTORE_S3_HOST
              value: "{{ nextcloud_minio_url }}"
            - name: OBJECTSTORE_S3_BUCKET
              value: "{{ nextcloud.server.s3.bucket }}"
            - name: OBJECTSTORE_S3_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ nextcloud.minio.name }}"
                  key: accessKey
                  optional: false
            - name: OBJECTSTORE_S3_SECRET
              valueFrom:
                secretKeyRef:
                  name: "{{ nextcloud.minio.name }}"
                  key: secretKey
                  optional: false
            - name: OBJECTSTORE_S3_PORT
              value: "9000"
            - name: OBJECTSTORE_S3_SSL
              value: "false"
            - name: OBJECTSTORE_S3_REGION
              value: "{{ nextcloud.server.s3.region }}"
            - name: OBJECTSTORE_S3_AUTOCREATE
              value: "false"
            - name: OBJECTSTORE_S3_LEGACYAUTH
              value: "true"
            - name: OBJECTSTORE_S3_USEPATH_STYLE
              value: "true"#}
          ports:
            - name: web
              containerPort: 80
              protocol: TCP
{#          livenessProbe:
            httpGet:
              path: /status.php
              port: web
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /status.php
              port: web
            failureThreshold: 1
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2#}
          resources:
            {{ nextcloud.server.resources | to_nice_yaml | indent(12) }}
          volumeMounts:
            - name: "data-volume"
              mountPath: "/var/www/html"
            - name: "log-volume"
              mountPath: "/var/log"
      nodeSelector:
        {{ nextcloud.server.nodeSelector | to_nice_yaml | indent(8) }}
      volumes:
        - name: data-volume
          persistentVolumeClaim:
            claimName: "{{ nextcloud.server.name }}"
        - name: scripts-volume
          configMap:
            name: "{{ nextcloud.server.name }}"
            optional: false
            defaultMode: 0755
            items:
              - key: "group.ldif"
                path: "group.ldif"
        - name: "log-volume"
          emptyDir: {}
