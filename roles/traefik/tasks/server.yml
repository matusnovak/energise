- name: "Set traefik server facts"
  set_fact:
    traefikserver_url: "{{ traefik.server.name }}.{{ common.namespace }}.svc.cluster.local"
    traefik_yml: "{{ lookup('template', role_path + '/templates/traefik.yml.j2') }}"

- name: "Check for presence of self signed certificates"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ traefik.server.name }}-certs"
    namespace: "{{ common.namespace }}"
  register: secret
  when: traefik.server.https.enabled and traefik.server.certs.type == "self-signed"

- name: "Generate self signed certificate"
  block:
    - name: "Create temporary certs directory"
      ansible.builtin.tempfile:
        state: directory
        suffix: certs
      register: tempdir

    - name: "Create private key"
      community.crypto.openssl_privatekey:
        path: "{{ tempdir.path }}/key.pem"
        type: "RSA"
        size: 4096
      register: key_pem

    - name: "Create certificate signing request"
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ tempdir.path }}/key.pem"
        common_name: "{{ common.domain }}"
        organization_name: "{{ common.domain }}"
        subject_alt_name:
          - "DNS:{{ common.domain }}"
          - "DNS:*.{{ common.domain }}"
      register: csr

    - name: "Create self-signed certificate"
      community.crypto.x509_certificate:
        path: "{{ tempdir.path }}/cert.pem"
        csr_content: "{{ csr.csr }}"
        privatekey_path: "{{ tempdir.path }}/key.pem"
        provider: selfsigned
      register: "cert_pem"

    - name: "Create certs secret"
      kubernetes.core.k8s:
        state: present
        definition:
          api_version: v1
          kind: Secret
          metadata:
            name: "{{ traefik.server.name }}-certs"
            namespace: "{{ common.namespace }}"
            labels:
              "app.kubernetes.io/managed-by": "energise"
              "app.kubernetes.io/part-of": "{{ common.namespace }}"
              "app.kubernetes.io/component": "{{ traefik.server.name }}"
          type: Opaque
          data:
            key.pem: "{{ lookup('file', tempdir.path + '/key.pem') | b64encode }}"
            cert.pem: "{{ lookup('file', tempdir.path + '/cert.pem') | b64encode }}"
  when: traefik.server.https.enabled and traefik.server.certs.type == "self-signed" and (secret.resources | length) == 0

- name: "Create CRDS"
  include_tasks: "roles/common/tasks/apply.yml"
  vars:
    resources: "{{ role_path }}/templates/crds/"
    name: "{{ common.namespace }}-traefik-crds"
    deployment_timeout: 0
    update_with_hash: false

- name: "Run deployment"
  include_tasks: "roles/common/tasks/apply.yml"
  vars:
    resources: "{{ role_path }}/templates/server/"
    name: "{{ traefik.server.name }}"
    deployment_timeout: 12
    storages:
      - dir: "{{ traefik.server.storage.dir }}"
        mode: "0700"
        uid: 1000
        gid: 1000
        when: traefik.server.certs.type == 'resolver'
