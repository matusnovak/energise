apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ traefik.server.name }}"
  namespace: "{{ common.namespace }}"
  labels:
    {{ service.extraLabels | to_nice_yaml | indent(4) }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{ service.selector | to_nice_yaml | indent(6) }}
  template:
    metadata:
      annotations:
        checksum/config: "{{ traefik_yml | hash('md5') }}"
{% if traefik.server.podAnnotations %}
        {{ traefik.server.podAnnotations | to_nice_yaml | indent(8) }}
{% endif %}
      labels:
        {{ service.selector | to_nice_yaml | indent(8) }}
{% if traefik.server.podLabels %}
        {{ traefik.server.podLabels | to_nice_yaml | indent(8) }}
{% endif %}
    spec:
      serviceAccountName: "{{ traefik.server.name }}"
      securityContext:
        runAsUser: 1000
{% if traefik.server.pullSecret is defined %}
      imagePullSecrets:
        - name: "{{ traefik.server.pullSecret }}"
{% endif %}
{% if traefik.server.auth.enabled and traefik.server.dashboard.enabled %}
      initContainers:
        {{ lookup('template', openldap_container_add_group_path, template_vars=dict(ldap_group_name=traefik.server.auth.group)) | indent(8) }}
{% endif %}
      containers:
        - name: "server"
          image: "{{ traefik.server.image.name }}:{{ traefik.server.image.tag }}"
          imagePullPolicy: "{{ traefik.server.image.pullPolicy }}"
          ports:
            - name: traefik
              containerPort: {{ traefik.server.port }}
              protocol: TCP
{% if traefik.server.http.enabled %}
            - name: web
              containerPort: {{ traefik.server.http.port }}
              protocol: TCP
{% endif %}
{% if traefik.server.https.enabled %}
            - name: websecure
              containerPort: {{ traefik.server.https.port }}
              protocol: TCP
{% endif %}
{% if traefik.server.env %}
          env:
            {{ traefik.server.env | to_nice_yaml | indent(12) }}
{% endif %}
          readinessProbe:
            httpGet:
              path: /ping
              port: traefik
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /ping
              port: traefik
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{ traefik.server.resources | to_nice_yaml | indent(12) }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: config-volume
              mountPath: "/etc/traefik"
              readonly: true
{% if traefik.server.certs.type == 'resolver' %}
            - name: acme-volume
              mountPath: /acme
{% endif %}
{% if traefik.server.certs.type == 'self-signed' %}
            - name: certs-volume
              mountPath: "/certs"
              readOnly: true
{% endif %}
      nodeSelector:
        {{ traefik.server.nodeSelector | to_nice_yaml | indent(8) }}
      volumes:
        - name: config-volume
          configMap:
            name: "{{ traefik.server.name }}"
            optional: false
            items:
              - key: "traefik.yml"
                path: "traefik.yml"
{% if traefik.server.certs.type == 'resolver' %}
        - name: acme-volume
          persistentVolumeClaim:
            claimName: "{{ traefik.server.name }}"
{% endif %}
{% if traefik.server.certs.type == 'self-signed' %}
        - name: certs-volume
          secret:
            secretName: "{{ traefik.server.name }}-certs"
            optional: false
            items:
              - key: "cert.pem"
                path: "{{ common.domain }}.cert"
              - key: "key.pem"
                path: "{{ common.domain }}.key"
{% endif %}
