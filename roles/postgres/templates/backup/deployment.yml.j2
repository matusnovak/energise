apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ postgres.backup.name }}"
  namespace: "{{ common.namespace }}"
  labels:
    {{ service.extraLabels | to_nice_yaml | indent(4) }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{ service.selector | to_nice_yaml | indent(6) }}
  template:
    metadata:
{% if postgres.backup.podAnnotations %}
      annotations:
        {{ postgres.backup.podAnnotations | to_nice_yaml | indent(8) }}
{% endif %}
      labels:
        {{ service.selector | to_nice_yaml | indent(8) }}
{% if postgres.backup.podLabels %}
        {{ postgres.backup.podLabels | to_nice_yaml | indent(8) }}
{% endif %}
    spec:
      serviceAccountName: "{{ postgres.backup.name }}"
      securityContext:
        runAsUser: {{ postgres.backup.uid }}
        runAsGroup: {{ postgres.backup.gid }}
        fsGroup: {{ postgres.backup.gid }}
{% if postgres.backup.pullSecret is defined %}
      imagePullSecrets:
        - name: "{{ postgres.backup.pullSecret }}"
{% endif %}
      initContainers:
        {{ lookup('template', postgres_container_wait_database_path) | indent(8) }}
      containers:
        - name: "server"
          image: "{{ postgres.backup.image.name }}:{{ postgres.backup.image.tag }}"
          imagePullPolicy: "{{ postgres.backup.image.pullPolicy }}"
          env:
            - name: POSTGRES_HOST
              value: "{{ postgres_server_url }}"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ postgres.server.name }}"
                  key: password
                  optional: false
            - name: POSTGRES_USER
              value: "{{ postgres.server.user }}"
            - name: POSTGRES_CLUSTER
              value: "TRUE"
            - name: POSTGRES_DB
              value: "{{ postgres.server.database }}"
            - name: POSTGRES_EXTRA_OPTS
              value: "{{ postgres.backup.extra }}"
            - name: SCHEDULE
              value: "{{ postgres.backup.schedule }}"
            - name: BACKUP_KEEP_DAYS
              value: "{{ postgres.backup.keepDays }}"
            - name: BACKUP_KEEP_WEEKS
              value: "{{ postgres.backup.keepWeeks }}"
            - name: BACKUP_KEEP_MONTHS
              value: "{{ postgres.backup.keepMonths }}"
            - name: HEALTHCHECK_PORT
              value: "8080"
{% if postgres.backup.env %}
            {{ postgres.backup.env | to_nice_yaml | indent(12) }}
{% endif %}
          ports:
            - name: healthcheck
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: healthcheck
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: healthcheck
            failureThreshold: 1
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{ postgres.backup.resources | to_nice_yaml | indent(12) }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: data-volume
              mountPath: /backups
      nodeSelector:
        {{ postgres.backup.nodeSelector | to_nice_yaml | indent(8) }}
      volumes:
        - name: data-volume
          persistentVolumeClaim:
            claimName: "{{ postgres.backup.name }}"
