apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ hedgedoc.server.name }}"
  namespace: "{{ common.namespace }}"
  labels:
    {{ service.extraLabels | to_nice_yaml | indent(4) }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{ service.selector | to_nice_yaml | indent(6) }}
  template:
    metadata:
{% if hedgedoc.server.podAnnotations %}
      annotations:
        {{ hedgedoc.server.podAnnotations | to_nice_yaml | indent(8) }}
{% endif %}
      labels:
        {{ service.selector | to_nice_yaml | indent(8) }}
{% if hedgedoc.server.podLabels %}
        {{ hedgedoc.server.podLabels | to_nice_yaml | indent(8) }}
{% endif %}
    spec:
      serviceAccountName: "{{ hedgedoc.server.name }}"
      securityContext:
        runAsUser: {{ hedgedoc.server.uid }}
        runAsGroup: {{ hedgedoc.server.gid }}
        fsGroup: {{ hedgedoc.server.gid }}
        allowPrivilegeEscalation: false
{% if hedgedoc.server.pullSecret is defined %}
      imagePullSecrets:
        - name: "{{ hedgedoc.server.pullSecret }}"
{% endif %}
      initContainers:
        {{ lookup('template', postgres_container_add_database_path, template_vars=dict(database=hedgedoc.server.database)) | indent(8) }}
        {{ lookup('template', openldap_container_add_group_path, template_vars=dict(ldap_group_name=hedgedoc.server.auth.group)) | indent(8) }}
      containers:
        - name: "server"
          image: "{{ hedgedoc.server.image.name }}:{{ hedgedoc.server.image.tag }}"
          imagePullPolicy: "{{ hedgedoc.server.image.pullPolicy }}"
          env:
            - name: CMD_URL_ADDPORT
              value: "false"
            - name: CMD_DOMAIN
              value: "{{ hedgedoc.server.subdomain }}.{{ common.domain }}"
            - name: CMD_ALLOW_ORIGIN
              value: "{{ hedgedoc.server.subdomain }}.{{ common.domain }}"
            - name: CMD_DB_URL
              valueFrom:
                secretKeyRef:
                  name: "{{ hedgedoc.server.name }}"
                  key: "cmdDbUrl"
                  optional: false
            - name: CMD_ALLOW_ANONYMOUS
              value: "false"
            - name: CMD_ALLOW_ANONYMOUS_EDITS
              value: "false"
            - name: CMD_EMAIL
              value: "false"
            - name: CMD_LDAP_URL
              value: "ldap://{{ openldap_server_url }}"
            - name: CMD_LDAP_BINDDN
              value: "{{ openldap_readonly_user_dn }}"
            - name: CMD_LDAP_BINDCREDENTIALS
              value: "{{ openldap.server.readonlyPassword }}"
            - name: CMD_LDAP_SEARCHBASE
              value: "{{ openldap_users_dn }}"
            - name: CMD_LDAP_SEARCHFILTER
              value: "(&(uid={% raw %}{{username}}{% endraw %})(memberOf=cn={{ hedgedoc.server.auth.group }},{{ openldap_groups_dn }}))"
            - name: CMD_LDAP_SEARCHATTRIBUTES
              value: "dn,cn,uid"
            - name: CMD_LDAP_USERIDFIELD
              value: "uid"
            - name: CMD_LDAP_USERNAMEFIELD
              value: "uid"
            - name: CMD_LDAP_PROVIDERNAME
              value: "{{ common.domain }}"
            - name: CMD_PROTOCOL_USESSL
              value: "true"
{% if hedgedoc.server.env %}
            {{ hedgedoc.server.env | to_nice_yaml | indent(12) }}
{% endif %}
          ports:
            - name: web
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: web
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: web
            failureThreshold: 1
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{ hedgedoc.server.resources | to_nice_yaml | indent(12) }}
          volumeMounts:
            - name: data-volume
              mountPath: "/hedgedoc/public/uploads"
      nodeSelector:
        {{ hedgedoc.server.nodeSelector | to_nice_yaml | indent(8) }}
      volumes:
        - name: data-volume
          persistentVolumeClaim:
            claimName: "{{ hedgedoc.server.name }}"
