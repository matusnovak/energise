apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ authelia.server.name }}"
  namespace: "{{ common.namespace }}"
  labels:
    {{ service.extraLabels | to_nice_yaml | indent(4) }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{ service.selector | to_nice_yaml | indent(6) }}
  template:
    metadata:
      annotations:
        checksum/config: "{{ configuration_yml | hash('md5') }}"
{% if authelia.server.podAnnotations %}
        {{ authelia.server.podAnnotations | to_nice_yaml | indent(8) }}
{% endif %}
      labels:
        {{ service.selector | to_nice_yaml | indent(8) }}
{% if authelia.server.podLabels %}
        {{ authelia.server.podLabels | to_nice_yaml | indent(8) }}
{% endif %}
    spec:
      serviceAccountName: "{{ authelia.server.name }}"
      enableServiceLinks: false
      securityContext:
        runAsUser: 1000
        allowPrivilegeEscalation: false
{% if openldap.server.pullSecret is defined %}
      imagePullSecrets:
        - name: "{{ openldap.server.pullSecret }}"
{% endif %}
      initContainers:
        - name: "init-postgres"
          image: "{{ postgres.server.image.name }}:{{ postgres.server.image.tag }}"
          imagePullPolicy: "{{ postgres.server.image.pullPolicy }}"
          command:
            - 'sh'
            - '-c'
            - |
              until psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_ROLE -d $POSTGRES_DB -c "select 1"; do echo "waiting for database"; sleep 2; done;
              echo "SELECT 'CREATE DATABASE {{ authelia.server.database.name }}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{ authelia.server.database.name }}')\gexec" | psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_ROLE -d $POSTGRES_DB;
              echo "SELECT 'CREATE ROLE {{ authelia.server.database.role }} WITH LOGIN PASSWORD ''{{ authelia.server.database.password }}''' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '{{ authelia.server.database.role }}')\gexec" | psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_ROLE -d $POSTGRES_DB;
              echo "GRANT ALL PRIVILEGES ON DATABASE {{ authelia.server.database.name }} TO {{ authelia.server.database.role }}" | psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_ROLE -d $POSTGRES_DB;
          env:
            - name: POSTGRES_HOST
              value: "{{ postgres_server_url }}"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_ROLE
              value: "{{ postgres.server.user }}"
            - name: POSTGRES_DB
              value: "{{ postgres.server.database }}"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ postgres.server.name }}"
                  key: password
                  optional: false
        - name: "init-openldap"
          image: "{{ openldap.server.image.name }}:{{ openldap.server.image.tag }}"
          imagePullPolicy: "{{ openldap.server.image.pullPolicy }}"
          command:
            - '/bin/bash'
            - '-c'
            - 'until ldapsearch -x -H "ldap://$LDAP_HOST:389" -D "$LDAP_USER" -w "$LDAP_PASSWORD" -b "$LDAP_BASE" -o nettimeout=1; do echo "waiting for openldap"; sleep 2; done;'
          env:
            - name: LDAP_HOST
              value: "{{ openldap_server_url }}"
            - name: LDAP_USER
              value: "cn=readonly,{{ common.domainComponent }}"
            - name: LDAP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ openldap.server.name }}"
                  key: readonlyPassword
                  optional: false
            - name: LDAP_BASE
              value: "{{ common.domainComponent }}"
      containers:
        - name: "server"
          image: "{{ authelia.server.image.name }}:{{ authelia.server.image.tag }}"
          imagePullPolicy: "{{ authelia.server.image.pullPolicy }}"
          ports:
            - name: web
              containerPort: 9091
              protocol: TCP
{% if authelia.server.env %}
          env:
            {{ authelia.server.env | to_nice_yaml | indent(12) }}
{% endif %}
          livenessProbe:
            httpGet:
              path: /
              port: web
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: web
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{ authelia.server.resources | to_nice_yaml | indent(12) }}
          volumeMounts:
            - name: "config-volume"
              mountPath: "/config"
              readonly: true
            - name: "notification-volume"
              mountPath: "/notification"
      nodeSelector:
        {{ authelia.server.nodeSelector | to_nice_yaml | indent(8) }}
      volumes:
        - name: "config-volume"
          configMap:
            name: "{{ authelia.server.name }}"
            optional: false
            items:
              - key: "configuration.yml"
                path: "configuration.yml"
        - name: "notification-volume"
          emptyDir: {}
