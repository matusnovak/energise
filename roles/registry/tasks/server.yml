- name: "Set registry facts"
  set_fact:
    registry_server_url: "{{ registry.server.name }}.{{ common.namespace }}.svc.cluster.local"
    htpasswd_hash: "{{ (registry.server.username + registry.server.password) | hash('md5')}}"
    dockerconfig_json: "{{ lookup('template', role_path + '/templates/dockerconfig.json.j2') | to_json }}"

- name: "Generate htpasswd"
  htpasswd_bcrypt:
    user: "{{ registry.server.username }}"
    password: "{{ registry.server.password }}"
  register: htpasswd_result

- name: "Check for presence of htpasswd"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ registry.server.name }}-htpasswd"
    namespace: "{{ common.namespace }}"
    label_selectors:
      - "energise.io/secret-hash={{ htpasswd_hash }}"
  register: secret

- name: "Generate htpasswd"
  block:
    - name: "Use htpasswd bcrypt for the password"
      htpasswd_bcrypt:
        user: "{{ registry.server.username }}"
        password: "{{ registry.server.password }}"
      register: htpasswd_result

    - name: "Create certs secret"
      kubernetes.core.k8s:
        state: present
        definition:
          api_version: v1
          kind: Secret
          metadata:
            name: "{{ registry.server.name }}-htpasswd"
            namespace: "{{ common.namespace }}"
            labels:
              "app.kubernetes.io/managed-by": "energise"
              "app.kubernetes.io/part-of": "{{ common.namespace }}"
              "app.kubernetes.io/component": "{{ registry.server.name }}"
              "energise.io/secret-hash": "{{ htpasswd_hash }}"
          type: Opaque
          data:
            htpasswd: "{{ htpasswd_result.out | b64encode }}"
  when: (secret.resources | length) == 0

- name: "Check for presence of self signed certificates"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ registry.server.name }}-certs"
    namespace: "{{ common.namespace }}"
  register: secret

- name: "Generate self signed certificate"
  block:
    - name: "Create temporary certs directory"
      ansible.builtin.tempfile:
        state: directory
        suffix: certs
      register: tempdir

    - name: "Create private key"
      community.crypto.openssl_privatekey:
        path: "{{ tempdir.path }}/key.pem"
        type: "RSA"
        size: 4096
      register: key_pem

    - name: "Create certificate signing request"
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ tempdir.path }}/key.pem"
        common_name: "{{ common.domain }}"
        organization_name: "{{ common.domain }}"
        subject_alt_name:
          - "IP:{{ master_node_ip }}"
          - "DNS:{{ registry_server_url }}"
      register: csr

    - name: "Create self-signed certificate"
      community.crypto.x509_certificate:
        path: "{{ tempdir.path }}/cert.pem"
        csr_content: "{{ csr.csr }}"
        privatekey_path: "{{ tempdir.path }}/key.pem"
        provider: selfsigned
      register: "cert_pem"

    - name: "Create certs secret"
      kubernetes.core.k8s:
        state: present
        definition:
          api_version: v1
          kind: Secret
          metadata:
            name: "{{ registry.server.name }}-certs"
            namespace: "{{ common.namespace }}"
            labels:
              "app.kubernetes.io/managed-by": "energise"
              "app.kubernetes.io/part-of": "{{ common.namespace }}"
              "app.kubernetes.io/component": "{{ registry.server.name }}"
          type: Opaque
          data:
            key.pem: "{{ lookup('file', tempdir.path + '/key.pem') | b64encode }}"
            cert.pem: "{{ lookup('file', tempdir.path + '/cert.pem') | b64encode }}"
  when: (secret.resources | length) == 0

- name: "Run deployment"
  include_tasks: "roles/common/tasks/apply.yml"
  vars:
    resources: "{{ role_path }}/templates/server/"
    name: "{{ registry.server.name }}"
    deployment_timeout: 6
    storages:
      - dir: "{{ registry.server.storage.dir }}"
        setup: "{{ registry.server.storage.setup | default(omit) }}"
        mode: "0755"
        uid: "{{ registry.server.uid }}"
        gid: "{{ registry.server.gid }}"
        host: "{{ registry.server.storage.host | default(omit) }}"
        nfs: "{{ registry.server.storage.nfs | default(omit) }}"
