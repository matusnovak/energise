apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ registry.server.name }}"
  namespace: "{{ common.namespace }}"
  labels:
    {{ service.extraLabels | to_nice_yaml | indent(4) }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{ service.selector | to_nice_yaml | indent(6) }}
  template:
    metadata:
      annotations:
        checksum/config: "{{ htpasswd_hash | hash('md5') }}"
{% if registry.server.podAnnotations %}
        {{ registry.server.podAnnotations | to_nice_yaml | indent(8) }}
{% endif %}
      labels:
        {{ service.selector | to_nice_yaml | indent(8) }}
{% if registry.server.podLabels %}
        {{ registry.server.podLabels | to_nice_yaml | indent(8) }}
{% endif %}
    spec:
      serviceAccountName: "{{ registry.server.name }}"
      securityContext:
        runAsUser: "{{ registry.server.uid }}"
        runAsGroup: "{{ registry.server.uid }}"
        fsGroup: "{{ registry.server.gid }}"
{% if registry.server.pullSecret is defined %}
      imagePullSecrets:
        - name: "{{ registry.server.pullSecret }}"
{% endif %}
      containers:
        - name: "server"
          image: "{{ registry.server.image.name }}:{{ registry.server.image.tag }}"
          imagePullPolicy: "{{ registry.server.image.pullPolicy }}"
          env:
            - name: REGISTRY_HTTP_ADDR
              value: "0.0.0.0:{{ registry.server.port }}"
            - name: REGISTRY_HTTP_TLS_CERTIFICATE
              value: "/certs/cert.pem"
            - name: REGISTRY_HTTP_TLS_KEY
              value: "/certs/key.pem"
            - name: REGISTRY_AUTH_HTPASSWD_REALM
              value: "{{ common.namespace }} realm"
            - name: REGISTRY_AUTH_HTPASSWD_PATH
              value: "/auth/htpasswd"
            - name: REGISTRY_AUTH
              value: "htpasswd"
{% if registry.server.env %}
            {{ registry.server.env | to_nice_yaml | indent(12) }}
{% endif %}
          ports:
            - name: registry
              containerPort: {{ registry.server.port }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /v2/_catalog
              port: registry
              scheme: HTTPS
              httpHeaders:
                - name: "Authorization"
                  value: "Basic {{ (registry.server.username + ':' + registry.server.password) | b64encode }}"
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /v2/_catalog
              port: registry
              scheme: HTTPS
              httpHeaders:
                - name: "Authorization"
                  value: "Basic {{ (registry.server.username + ':' + registry.server.password) | b64encode }}"
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{ registry.server.resources | to_nice_yaml | indent(12) }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: data-volume
              mountPath: /var/lib/registry
            - name: certs-volume
              mountPath: "/certs"
              readOnly: true
            - name: htpasswd-volume
              mountPath: "/auth"
              readOnly: true
      nodeSelector:
        "node-role.kubernetes.io/master": "true"
{% if registry.server.nodeSelector %}
        {{ registry.server.nodeSelector | to_nice_yaml | indent(8) }}
{% endif %}
      volumes:
        - name: data-volume
          persistentVolumeClaim:
            claimName: "{{ registry.server.name }}"
        - name: certs-volume
          secret:
            secretName: "{{ registry.server.name }}-certs"
            optional: false
            items:
              - key: "cert.pem"
                path: "cert.pem"
              - key: "key.pem"
                path: "key.pem"
        - name: htpasswd-volume
          secret:
            secretName: "{{ registry.server.name }}-htpasswd"
            optional: false
            items:
              - key: "htpasswd"
                path: "htpasswd"
