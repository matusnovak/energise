apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ onlyoffice.server.name }}"
  namespace: "{{ common.namespace }}"
  labels:
    {{ service.extraLabels | to_nice_yaml | indent(4) }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{ service.selector | to_nice_yaml | indent(6) }}
  template:
    metadata:
{% if onlyoffice.server.podAnnotations %}
      annotations:
        {{ onlyoffice.server.podAnnotations | to_nice_yaml | indent(8) }}
{% endif %}
      labels:
        {{ service.selector | to_nice_yaml | indent(8) }}
{% if onlyoffice.server.podLabels %}
        {{ onlyoffice.server.podLabels | to_nice_yaml | indent(8) }}
{% endif %}
    spec:
      serviceAccountName: "{{ onlyoffice.server.name }}"
      securityContext:
        allowPrivilegeEscalation: false
{% if onlyoffice.server.pullSecret is defined %}
      imagePullSecrets:
        - name: "{{ onlyoffice.server.pullSecret }}"
{% endif %}
      initContainers:
        {{ lookup('template', postgres_container_add_database_path, template_vars=dict(database=onlyoffice.server.database)) | indent(8) }}
      containers:
        - name: "server"
          image: "{{ onlyoffice.server.image.name }}:{{ onlyoffice.server.image.tag }}"
          imagePullPolicy: "{{ onlyoffice.server.image.pullPolicy }}"
          env:
            - name: "ONLYOFFICE_HTTPS_HSTS_ENABLED"
              value: "false"
            - name: "SSL_VERIFY_CLIENT"
              value: "false"
            - name: "DB_TYPE"
              value: "postgres"
            - name: "DB_HOST"
              value: "{{ postgres_server_url }}"
            - name: "DB_PORT"
              value: "5432"
            - name: "DB_USER"
              value: "{{ onlyoffice.server.database.role }}"
            - name: "DB_NAME"
              value: "{{ onlyoffice.server.database.name }}"
            - name: "JWT_ENABLED"
              value: "true"
            - name: "JWT_SECRET"
              valueFrom:
                secretKeyRef:
                  name: "{{ onlyoffice.server.name }}"
                  key: "jwtSecret"
                  optional: false
            - name: "DB_PWD"
              valueFrom:
                secretKeyRef:
                  name: "{{ onlyoffice.server.name }}"
                  key: "databasePassword"
                  optional: false
            - name: "AMQP_URI"
              valueFrom:
                secretKeyRef:
                  name: "{{ onlyoffice.server.name }}"
                  key: "amqpUri"
                  optional: false
            - name: "AMQP_TYPE"
              value: "rabbitmq"
            - name: "REDIS_SERVER_HOST"
              value: "{{ onlyoffice_redis_url }}"
            - name: "REDIS_SERVER_PORT"
              value: "6379"
{% if onlyoffice.server.env %}
          env:
            {{ onlyoffice.server.env | to_nice_yaml | indent(12) }}
{% endif %}
          ports:
            - name: web
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: web
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: web
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            {{ onlyoffice.server.resources | to_nice_yaml | indent(12) }}
          volumeMounts:
            - name: data-volume
              mountPath: "/var/log/onlyoffice"
              subPath: "logs"
            - name: data-volume
              mountPath: "/var/www/onlyoffice/Data"
              subPath: "data"
            - name: data-volume
              mountPath: "/var/lib/onlyoffice"
              subPath: "lib"
#            - name: temp-volume
#              mountPath: "/etc/onlyoffice"
      nodeSelector:
        {{ onlyoffice.server.nodeSelector | to_nice_yaml | indent(8) }}
      volumes:
        - name: data-volume
          persistentVolumeClaim:
            claimName: "{{ onlyoffice.server.name }}"
#        - name: temp-volume
#          emptyDir: {}
